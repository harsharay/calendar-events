{"version":3,"sources":["Components/DayEvents/DayEvents.js","Components/Calendar/Calendar.js","App.js","reportWebVitals.js","index.js"],"names":["DayEvents","clickedDate","eventsData","dayNight","useState","eventsOfTheDay","setEventsOfTheDay","noEventForTheDay","setNoEventForTheDay","useEffect","console","log","className","map","item","index","hours","minutes","duration","title","Calendar","today","events","setEvents","setClickedDate","setDayNight","plugins","dayGridPlugin","interactionPlugin","initialView","dateClick","e","date","dateStr","dayEl","Swal","fire","icon","html","text","button","showCancelButton","showLoaderOnConfirm","preConfirm","actualTitle","document","getElementById","value","actualHours","actualMinutes","actualDuration","headerToolbar","firstDay","Switch","onChange","color","name","inputProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2ecb6fce.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\n\r\nimport \"./DayEvents.css\"\r\n\r\nfunction DayEvents({ clickedDate, eventsData, dayNight }) {\r\n\r\n    const [eventsOfTheDay, setEventsOfTheDay] = useState([])\r\n    const [noEventForTheDay, setNoEventForTheDay] = useState(true)\r\n    \r\n\r\n    useEffect(() => {\r\n        if(eventsData[clickedDate]){\r\n            setNoEventForTheDay(false)\r\n            console.log(\"Events are present for the day\",eventsData[clickedDate])\r\n            setEventsOfTheDay(eventsData[clickedDate])\r\n        } else {\r\n            setNoEventForTheDay(true)\r\n            console.log(\"no events scheduled for the day\")\r\n        }\r\n        \r\n    },[clickedDate, eventsData])\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <p>{clickedDate}</p>\r\n            { !noEventForTheDay \r\n                ?\r\n                <div>\r\n                    <div className=\"events-block\">\r\n                        { eventsOfTheDay.map((item, index) => {\r\n                            return (\r\n                                <div key={index} className=\"events-for-the-day\">\r\n                                    <p className={dayNight ? \"events-hours-light\" : \"events-hours-dark\"}>{item.hours}:{item.minutes}</p>\r\n                                    <p className=\"events-duration\">{item.duration} mins</p>\r\n                                    <p className=\"events-title\">{item.title}</p>\r\n                                </div>\r\n                            )\r\n                        }) }\r\n                    </div>\r\n                </div>\r\n                :\r\n                    <h3>No scheduled events</h3>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DayEvents\r\n","import React, { useEffect, useState } from 'react';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n// import swal from 'sweetalert';\r\nimport Swal from 'sweetalert2'\r\nimport DayEvents from \"../DayEvents/DayEvents\"\r\nimport moment from \"moment\";\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\r\nimport NightsStayIcon from '@material-ui/icons/NightsStay';\r\n\r\nimport \"./Calendar.css\"\r\n\r\nfunction Calendar() {\r\n\r\n    const [today, setToday] = useState(\"\")\r\n    const [events, setEvents] = useState({})\r\n    const [clickedDate, setClickedDate] = useState(\"\")\r\n    // const [hourCount, setHourCount] = useState([])\r\n    // const [minutesCount, setMinutesCount] = useState([])\r\n    const [dayNight, setDayNight] = useState(true) //true is for day\r\n    \r\n    const handleToggleChange = () => {\r\n        setDayNight(!dayNight)\r\n    }\r\n\r\n    const handleDateClick = (e) => {\r\n        const date = e.dateStr\r\n\r\n        // e.dayEl.innerHTML = '<p>Add an event</p>'\r\n\r\n\r\n        console.log(18, e.dayEl)\r\n        setClickedDate(date)\r\n        Swal.fire({\r\n            title: 'Enter the details of event',\r\n            icon: 'info',\r\n            // input: 'select',\r\n            // inputOptions: hourCount,\r\n            html:\r\n                `<div class=\"sweetAlert-block\">`+\r\n                '<p>Enter the event name</p><input id=\"eventText\" placeholder=\"type here...\" class=\"title-sweetalert\">' +\r\n                '</br>' +\r\n                '<p>Enter the start hours</p><input id=\"eventHours\" placeholder=\"type here...\" class=\"hours-sweetalert\">' +\r\n                '</br>' +\r\n                '<p>Enter the start minutes</p><input id=\"eventMinutes\" placeholder=\"type here...\" class=\"minutes-sweetalert\">'+\r\n                '</br>' +\r\n                '<p>Enter the duration(mins)</p><input id=\"eventDuration\" placeholder=\"type here...\" class=\"duration-sweetalert\">'+\r\n                '</div>',\r\n\r\n                // '</br>' +\r\n                // '<p>Enter the event name</p><input id=\"eventTime\" placeholder=\"type here...\">',\r\n            // inputPlaceholder: 'type here...',\r\n            text: `Date: ${date}`,\r\n            button: {\r\n                text: 'Add event'\r\n            },\r\n            showCancelButton: true,\r\n            showLoaderOnConfirm: true,\r\n            preConfirm: () => {\r\n                let actualTitle = document.getElementById('eventText').value\r\n                let actualHours = document.getElementById('eventHours').value\r\n                let actualMinutes = document.getElementById('eventMinutes').value\r\n                let actualDuration = document.getElementById('eventDuration').value\r\n\r\n                if(actualTitle) {\r\n                    if(!events[date]) {\r\n                        return (\r\n                            setEvents( \r\n                                {\r\n                                    ...events,\r\n                                    [date]: [{\r\n                                        title: actualTitle,\r\n                                        hours: actualHours,\r\n                                        minutes: actualMinutes,\r\n                                        duration: actualDuration,\r\n                                        date\r\n                                    }]\r\n                                } \r\n                            )\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            setEvents( \r\n                                {\r\n                                    ...events,\r\n                                    [date]: [...events[date],{\r\n                                        title: actualTitle,\r\n                                        hours: actualHours,\r\n                                        minutes: actualMinutes,\r\n                                        duration: actualDuration,\r\n                                        date\r\n                                    }]\r\n                                } \r\n                            )\r\n                        )\r\n                    }\r\n                }\r\n            },\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"calendar-events-block\">\r\n                <div className={dayNight ? \"events-div-light\" : \"events-div-dark\"}>\r\n                    <div className=\"events-content\">\r\n                        <h4>Your tasks for today</h4>\r\n                        <DayEvents eventsData={events} clickedDate={clickedDate} dayNight={dayNight}/>\r\n                    </div>\r\n                </div>\r\n                <div className={dayNight ? \"calendar-div-light\" : \"calendar-div-dark\"}>\r\n                    <div className=\"calendar-content\">\r\n                        <FullCalendar\r\n                            plugins={[ dayGridPlugin, interactionPlugin ]}\r\n                            initialView=\"dayGridMonth\"\r\n                            dateClick={handleDateClick}\r\n                            events={events}\r\n                            headerToolbar={{\r\n                                'left': 'prev',\r\n                                'center': 'title',\r\n                                'right': 'next'\r\n                            }}\r\n                            firstDay = {today}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={dayNight ? \"dark-light-toggle-LIGHT\" : \"dark-light-toggle-DARK\"}>\r\n                <Brightness7Icon />\r\n                <Switch\r\n                    // checked={state.checkedB}\r\n                    onChange={handleToggleChange}\r\n                    color=\"primary\"\r\n                    name=\"checkedB\"\r\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                />\r\n                <NightsStayIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calendar\r\n","import Calendar from \"./Components/Calendar/Calendar\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calendar />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}