{"version":3,"sources":["Components/DayEvents/DayEvents.js","Components/Calendar/Calendar.js","App.js","reportWebVitals.js","index.js"],"names":["DayEvents","clickedDate","events","dayNight","useState","eventsOfTheDay","setEventsOfTheDay","noEventForTheDay","setNoEventForTheDay","useEffect","console","log","className","map","item","index","selectedHours","selectedMinutes","amPm","duration","name","Calendar","setDayNight","daysInCurrentMonth","setDaysInCurrentMonth","currentDay","setCurrentDay","currentMonth","setCurrentMonth","currentYear","setCurrentYear","1","2","3","4","5","6","7","8","9","10","11","12","allMonths","popup","setPopup","eventName","setEventName","hours","setHours","minutes","setMinutes","setDuration","setAmPm","setClickedDate","setSelectedHours","setSelectedMinutes","setEvents","numOfDays","Date","getDate","i","prevValue","presentMonth","getMonth","presentYear","getFullYear","document","querySelector","querySelectorAll","forEach","element","innerText","String","style","backgroundColor","color","onClick","fontSize","type","value","onChange","e","target","hour","hourIndex","minute","minuteIndex","fullDate","prev","day","dayIndex","handleDayClick","Switch","inputProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6b299618.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\n\r\nimport \"./DayEvents.css\"\r\n\r\nfunction DayEvents({ clickedDate, events, dayNight }) {\r\n\r\n    const [eventsOfTheDay, setEventsOfTheDay] = useState([])\r\n    const [noEventForTheDay, setNoEventForTheDay] = useState(true)\r\n    \r\n\r\n    useEffect(() => {\r\n        if(events[clickedDate]){\r\n            setNoEventForTheDay(false)\r\n            console.log(\"Events are present for the day\",events[clickedDate])\r\n            setEventsOfTheDay(events[clickedDate])\r\n        } else {\r\n            setNoEventForTheDay(true)\r\n            console.log(\"no events scheduled for the day\")\r\n        }\r\n        \r\n    },[clickedDate, events])\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <p>{clickedDate}</p>\r\n            { !noEventForTheDay \r\n                ?\r\n                <div>\r\n                    <div className=\"events-block\">\r\n                        { eventsOfTheDay.map((item, index) => {\r\n                            return (\r\n                                <div key={index} className=\"events-for-the-day\">\r\n                                    <p className={dayNight ? \"events-hours-light\" : \"events-hours-dark\"}>{item.selectedHours}:{item.selectedMinutes} {item.amPm}</p>\r\n                                    <p className=\"events-duration\">{item.duration} mins</p>\r\n                                    <p className=\"events-title\">{item.name}</p>\r\n                                </div>\r\n                            )\r\n                        }) }\r\n                    </div>\r\n                </div>\r\n                :\r\n                    <h3>No scheduled events</h3>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DayEvents\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport DayEvents from \"../DayEvents/DayEvents\";\r\n\r\nimport Switch from '@material-ui/core/Switch';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport Brightness7Icon from '@material-ui/icons/Brightness7';\r\nimport NightsStayIcon from '@material-ui/icons/NightsStay';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\n\r\nimport \"./Calendar.css\"\r\n\r\nfunction Calendar() {\r\n\r\n\r\n    const [dayNight, setDayNight] = useState(true) //true is for day\r\n\r\n    const [daysInCurrentMonth, setDaysInCurrentMonth] = useState([])\r\n    const [currentDay, setCurrentDay] = useState('')\r\n    const [currentMonth, setCurrentMonth] = useState('')\r\n    const [currentYear, setCurrentYear] = useState(0)\r\n    const [allMonths, setAllMonths] = useState({\r\n        1 : 'January',\r\n        2 : 'February',\r\n        3 : 'March',\r\n        4 : 'April',\r\n        5 : 'May',\r\n        6: 'June',\r\n        7 : 'July',\r\n        8 : 'August',\r\n        9 : 'September',\r\n        10: 'October',\r\n        11 : 'November',\r\n        12 : 'December'\r\n    })\r\n    const [popup, setPopup] = useState(false)\r\n    const [eventName, setEventName] = useState(\"\")\r\n    const [hours, setHours] = useState([])\r\n    const [minutes, setMinutes] = useState([])\r\n    const [duration, setDuration] = useState(\"\")\r\n    const [amPm, setAmPm] = useState('AM')\r\n    const [clickedDate, setClickedDate] = useState('')\r\n    const [selectedHours, setSelectedHours] = useState(0)\r\n    const [selectedMinutes, setSelectedMinutes] = useState(0)\r\n    const [events, setEvents] = useState({})\r\n\r\n    useEffect(() => {\r\n        setDaysInCurrentMonth([\"\"])\r\n        \r\n        if(currentMonth) {\r\n            let numOfDays = new Date(currentYear, currentMonth, 0).getDate()\r\n            for(let i=1;i<=numOfDays;i++){\r\n                setDaysInCurrentMonth(prevValue => {\r\n                    return (\r\n                        [...prevValue, i]\r\n                    )\r\n                })\r\n            }\r\n        }\r\n        \r\n    },[currentMonth, currentYear])\r\n\r\n    useEffect(() => {\r\n        let presentMonth = (new Date().getMonth()+1)\r\n        let presentYear = new Date().getFullYear()\r\n\r\n        setCurrentMonth(presentMonth)\r\n        setCurrentYear(presentYear)\r\n\r\n        for(let i=1; i<=12;i++) {\r\n            setHours(prevValue => {\r\n                return (\r\n                    [...prevValue, i]\r\n                )\r\n            })\r\n        }\r\n\r\n        for(let i=1; i<=60;i++) {\r\n            setMinutes(prevValue => {\r\n                return (\r\n                    [...prevValue, i]\r\n                )\r\n            })\r\n        }\r\n\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        let presentMonth = (new Date().getMonth()+1)\r\n        \r\n        let listOfElements;\r\n        if(document.querySelector(\".singleDay-block-light\")) {\r\n            listOfElements = [...document.querySelectorAll(\".singleDay-block-light\")]\r\n\r\n            listOfElements.forEach(element => {\r\n                if(element.innerText === String(new Date().getDate())){\r\n                    if(presentMonth === currentMonth ) {\r\n                        element.style.backgroundColor = \"#d9b002\";\r\n                        element.style.color = \"white\"\r\n                    } else {\r\n                        element.style.backgroundColor = \"\";\r\n                        element.style.color = \"\"\r\n                    } \r\n                }\r\n        })\r\n        } else if(document.querySelector(\".singleDay-block-dark\")) {\r\n            listOfElements = [...document.querySelectorAll(\".singleDay-block-dark\")]\r\n\r\n            listOfElements.forEach(element => {\r\n                if(element.innerText === String(new Date().getDate())){\r\n                    if(presentMonth === currentMonth ) {\r\n                        element.style.backgroundColor = \"#d9b002\";\r\n                        element.style.color = \"white\"\r\n                    } else {\r\n                        element.style.backgroundColor = \"\";\r\n                        element.style.color = \"\"\r\n                    } \r\n                }\r\n        })\r\n        }\r\n\r\n        \r\n        \r\n    },[daysInCurrentMonth, currentMonth, dayNight])\r\n\r\n    \r\n    const handleToggleChange = () => {\r\n        setDayNight(!dayNight)\r\n    }\r\n    \r\n    const handlePopupClose = () => {\r\n        setPopup(false)\r\n    }\r\n\r\n    const handleDayClick = day => {\r\n        setPopup(true);\r\n        setCurrentDay(day)\r\n        const clickedDate = `${day}-${currentMonth}-${currentYear}` \r\n        setClickedDate(clickedDate)\r\n\r\n        \r\n        console.log(day, currentMonth, allMonths[currentMonth]);\r\n    }\r\n\r\n    const handleEventNameChange = e => {\r\n        let name = e.target.value\r\n        setEventName(name)\r\n    }\r\n\r\n    const handleAddEventClick = () => {\r\n        let fullDate = `${currentDay}-${currentMonth}-${currentYear}`\r\n        if(events[fullDate]){\r\n                setEvents({\r\n                    ...events,\r\n                    [fullDate]: [...events[fullDate],{\r\n                        name: eventName,\r\n                        selectedHours,\r\n                        selectedMinutes,\r\n                        amPm,\r\n                        duration\r\n                    }]\r\n                })\r\n                setEventName(\"\")\r\n                setDuration(\"\")\r\n        } else {\r\n                setEvents({\r\n                    ...events,\r\n                    [fullDate]: [{\r\n                        name: eventName,\r\n                        selectedHours,\r\n                        selectedMinutes,\r\n                        amPm,\r\n                        duration\r\n                    }]\r\n                })\r\n                setEventName(\"\")\r\n                setDuration(\"\")\r\n        }\r\n\r\n    }\r\n\r\n    const handlePreviousMonthClick = () => {\r\n        setCurrentMonth(prev => {\r\n            return (\r\n                prev - 1\r\n            )\r\n        })\r\n    }\r\n\r\n    const handleNextMonthClick = () => {\r\n        setCurrentMonth(prev => {\r\n            return (\r\n                prev + 1\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            { popup && \r\n                <div className={dayNight ? \"eventPopup-light\" : \"eventPopup-dark\"}>\r\n                    <HighlightOffIcon onClick={handlePopupClose} fontSize=\"large\"/>\r\n                    <h3>Add the event details</h3>\r\n                    <div className=\"event-popup-content\">\r\n                        <p>Enter event Name</p>\r\n                        <input type=\"text\" value={eventName} onChange={handleEventNameChange} className={dayNight ? \"event-popup-input-light\" : \"event-popup-input-dark\"}/>\r\n                    </div>\r\n                    <div className=\"event-popup-time\">\r\n                        <div>\r\n                            <p>Select Time</p>\r\n                        </div>\r\n                        <div>\r\n                            { hours && \r\n                                <select className=\"event-popup-dropdown\" onChange={(e) => setSelectedHours(e.target.value)}>\r\n                                    { hours.map((hour, hourIndex) => {\r\n                                    return (\r\n                                        <option key={hourIndex}>{hour}</option>\r\n                                    )\r\n                                })}\r\n                                </select>\r\n                            }\r\n                            { minutes && \r\n                                <select className=\"event-popup-dropdown\" onChange={(e) => setSelectedMinutes(e.target.value)}>\r\n                                    { minutes.map((minute, minuteIndex) => {\r\n                                    return (\r\n                                        <option key={minuteIndex}>{minute}</option>\r\n                                    )\r\n                                })}\r\n                                </select>\r\n                            }\r\n                            <select className=\"event-popup-dropdown\" onChange={(e) => setAmPm(e.target.value)}>\r\n                                { ['AM','PM'].map((item, index) => {\r\n                                    return (\r\n                                        <option key={index}>{item}</option>\r\n                                    )\r\n                                }) }\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"event-popup-content\">\r\n                        <p>Duration (minutes)</p>\r\n                        <input type=\"text\" value={duration} onChange={e => setDuration(e.target.value)} className={dayNight ? \"event-popup-input-light\" : \"event-popup-input-dark\"}/>\r\n                    </div>\r\n                    <div className=\"event-popup-date\">\r\n                            <p>Event Date</p> \r\n                            <p>{`${currentDay}-${currentMonth}-${currentYear}`}</p>\r\n                    </div>\r\n                    <button onClick={handleAddEventClick} className=\"addEvent-button\">Add</button>\r\n                </div>   \r\n            }\r\n            <div className=\"calendar-events-block\">\r\n                <div className={dayNight ? \"events-div-light\" : \"events-div-dark\"}>\r\n                    <div className=\"events-content\">\r\n                        <h4>Your tasks for today</h4>\r\n                        <DayEvents events={events} clickedDate={clickedDate} dayNight={dayNight}/>\r\n                    </div>\r\n                </div>\r\n                <div className={dayNight ? \"calendar-div-light\" : \"calendar-div-dark\"}>\r\n                    <div className=\"calendar-header\">\r\n                        { currentMonth>1 && <NavigateBeforeIcon className={dayNight ? \"previous-next-icons-light\" : \"previous-next-icons-dark\"} fontSize=\"large\" onClick={handlePreviousMonthClick}/> }\r\n                        <h1 className=\"calendar-title\">{ allMonths[currentMonth] }</h1>\r\n                        { currentMonth<12 && <NavigateNextIcon className={dayNight ? \"previous-next-icons-light\" : \"previous-next-icons-dark\"} fontSize=\"large\" onClick={handleNextMonthClick}/> }\r\n                    </div>\r\n                    <div className=\"calendar-content\">\r\n                        {\r\n                            daysInCurrentMonth && \r\n                                daysInCurrentMonth.map((day, dayIndex) => {\r\n                                    return (\r\n                                        <div key={dayIndex} className={dayNight ? \"singleDay-block-light\" : \"singleDay-block-dark\"} onClick={() => handleDayClick(day)}>\r\n                                            <p>{day}</p>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={dayNight ? \"dark-light-toggle-LIGHT\" : \"dark-light-toggle-DARK\"}>\r\n                <Brightness7Icon />\r\n                <Switch\r\n                    // checked={state.checkedB}\r\n                    onChange={handleToggleChange}\r\n                    color=\"primary\"\r\n                    name=\"checkedB\"\r\n                    inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                />\r\n                <NightsStayIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calendar\r\n","import Calendar from \"./Components/Calendar/Calendar\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calendar />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}